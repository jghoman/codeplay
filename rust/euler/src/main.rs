use std::collections::HashMap;

// Problem 1
// If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.
// Find the sum of all the multiples of 3 or 5 below 1000.
fn sum_5_or_3_multiples(upper_bound: u64) -> u64 {
    let mut sum = 0;
    for i in 0 .. upper_bound {
        if (i % 3 == 0) || (i % 5 == 0) {
            sum += i;
        }
    }
    //println!("sum = {}", sum);
    sum
}

#[test]
fn test_sum_5_or_3_multiples() {
    assert_eq!(sum_5_or_3_multiples(10), 23);
}

#[test]
fn test_expected_answer() {
    assert_eq!(sum_5_or_3_multiples(1000), 233168);
}

// Problem 2
// Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
//
// 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
//
// By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.

static FIB_ANSWER: &'static [i64] = &[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765];

fn naive_fib(i: i64) -> i64 {
    match i {
        0 => 0,
        1 => 1,
        _ => naive_fib(i - 2) + naive_fib(i - 1),
    }
}

#[test]
fn test_naive_fib() {
    for i in 0 .. FIB_ANSWER.len() {
        let result = naive_fib(i as i64);
        println!("fib({}) == {}", i, result);
        assert_eq!(result, FIB_ANSWER[i]);
    };
}

fn memoized_fib(i: i64, ref mut memo: HashMap<i64, i64>) -> i64 {

    // let huh: i64 = match memo.get(&(i - 1)) {
    //     Some(x) => *x,
    //     _ => 42
    // };

    match i {
        0 => 0,
        1 => 1,
        _ => match memo.get(&(i -1)) {
                Some(x) => *x,
                None =>  {  let z:i64 = memoized_fib(i - 1, *memo);
                             memo.insert((i - 1), z);
                            z
                        }
            }
                
    }

    
}

#[test]
fn test_memoized_fib() {
    let mut memo = HashMap::<i64, i64>::new();
    assert_eq!(memoized_fib(5, memo), FIB_ANSWER[5]);
}

fn main() {
    let result = sum_5_or_3_multiples(1000);
    println!("Problem 1: Sum of all the multiple numbers of 3 or 5 below 1000 is {}", result);
}
